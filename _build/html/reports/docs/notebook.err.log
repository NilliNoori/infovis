Traceback (most recent call last):
  File "/home/nilli/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/nilli/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/nilli/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/home/nilli/miniconda3/envs/jupyterbook/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/home/nilli/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/nilli/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/nilli/miniconda3/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
#Click to see code

# Separate the data into two groups based on salt legislation policy
with_policy = data[data['salt_legislation_policy'] == 'Yes']
without_policy = data[data['salt_legislation_policy'] == 'No']

# Calculate the mean values of the risk factors for each group
risk_factors_with_policy = with_policy[['Risk_factor_obese_2018', 'Risk_factor_all-rf_2018']].mean()
risk_factors_without_policy = without_policy[['Risk_factor_obese_2018', 'Risk_factor_all-rf_2018']].mean()

# Combine the results into a single dataframe for comparison
comparison = pd.DataFrame({
    'With Policy': risk_factors_with_policy,
    'Without Policy': risk_factors_without_policy
})

# Data for the plot
obese_comparison_salt = comparison.loc['Risk_factor_obese_2018']

# Create the interactive bar plot
fig = go.Figure(data=[
    go.Bar(name='With Policy', x=['With Policy'], y=[obese_comparison_salt['With Policy']], marker_color='blue'),
    go.Bar(name='Without Policy', x=['Without Policy'], y=[obese_comparison_salt['Without Policy']], marker_color='red')
])

# Update layout for better visualization
fig.update_layout(
    title='Comparison of Deaths caused by Obesity with and without Salt Legislation Policy',
    yaxis_title='Mean Amount of Deaths',
    xaxis_title='Policy Status',
    barmode='group',
    xaxis_tickangle=0
)

# Show the interactive plot
fig.show()

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mKeyError[0m                                  Traceback (most recent call last)
Cell [0;32mIn[7], line 8[0m
[1;32m      5[0m without_policy [38;5;241m=[39m data[data[[38;5;124m'[39m[38;5;124msalt_legislation_policy[39m[38;5;124m'[39m] [38;5;241m==[39m [38;5;124m'[39m[38;5;124mNo[39m[38;5;124m'[39m]
[1;32m      7[0m [38;5;66;03m# Calculate the mean values of the risk factors for each group[39;00m
[0;32m----> 8[0m risk_factors_with_policy [38;5;241m=[39m [43mwith_policy[49m[43m[[49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43mRisk_factor_obese_2018[39;49m[38;5;124;43m'[39;49m[43m,[49m[43m [49m[38;5;124;43m'[39;49m[38;5;124;43mRisk_factor_all-rf_2018[39;49m[38;5;124;43m'[39;49m[43m][49m[43m][49m[38;5;241m.[39mmean()
[1;32m      9[0m risk_factors_without_policy [38;5;241m=[39m without_policy[[[38;5;124m'[39m[38;5;124mRisk_factor_obese_2018[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mRisk_factor_all-rf_2018[39m[38;5;124m'[39m]][38;5;241m.[39mmean()
[1;32m     11[0m [38;5;66;03m# Combine the results into a single dataframe for comparison[39;00m

File [0;32m~/.local/lib/python3.10/site-packages/pandas/core/frame.py:4108[0m, in [0;36mDataFrame.__getitem__[0;34m(self, key)[0m
[1;32m   4106[0m     [38;5;28;01mif[39;00m is_iterator(key):
[1;32m   4107[0m         key [38;5;241m=[39m [38;5;28mlist[39m(key)
[0;32m-> 4108[0m     indexer [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mcolumns[49m[38;5;241;43m.[39;49m[43m_get_indexer_strict[49m[43m([49m[43mkey[49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43mcolumns[39;49m[38;5;124;43m"[39;49m[43m)[49m[[38;5;241m1[39m]
[1;32m   4110[0m [38;5;66;03m# take() does not accept boolean indexers[39;00m
[1;32m   4111[0m [38;5;28;01mif[39;00m [38;5;28mgetattr[39m(indexer, [38;5;124m"[39m[38;5;124mdtype[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m) [38;5;241m==[39m [38;5;28mbool[39m:

File [0;32m~/.local/lib/python3.10/site-packages/pandas/core/indexes/base.py:6200[0m, in [0;36mIndex._get_indexer_strict[0;34m(self, key, axis_name)[0m
[1;32m   6197[0m [38;5;28;01melse[39;00m:
[1;32m   6198[0m     keyarr, indexer, new_indexer [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_reindex_non_unique(keyarr)
[0;32m-> 6200[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_raise_if_missing[49m[43m([49m[43mkeyarr[49m[43m,[49m[43m [49m[43mindexer[49m[43m,[49m[43m [49m[43maxis_name[49m[43m)[49m
[1;32m   6202[0m keyarr [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mtake(indexer)
[1;32m   6203[0m [38;5;28;01mif[39;00m [38;5;28misinstance[39m(key, Index):
[1;32m   6204[0m     [38;5;66;03m# GH 42790 - Preserve name from an Index[39;00m

File [0;32m~/.local/lib/python3.10/site-packages/pandas/core/indexes/base.py:6252[0m, in [0;36mIndex._raise_if_missing[0;34m(self, key, indexer, axis_name)[0m
[1;32m   6249[0m     [38;5;28;01mraise[39;00m [38;5;167;01mKeyError[39;00m([38;5;124mf[39m[38;5;124m"[39m[38;5;124mNone of [[39m[38;5;132;01m{[39;00mkey[38;5;132;01m}[39;00m[38;5;124m] are in the [[39m[38;5;132;01m{[39;00maxis_name[38;5;132;01m}[39;00m[38;5;124m][39m[38;5;124m"[39m)
[1;32m   6251[0m not_found [38;5;241m=[39m [38;5;28mlist[39m(ensure_index(key)[missing_mask[38;5;241m.[39mnonzero()[[38;5;241m0[39m]][38;5;241m.[39munique())
[0;32m-> 6252[0m [38;5;28;01mraise[39;00m [38;5;167;01mKeyError[39;00m([38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00mnot_found[38;5;132;01m}[39;00m[38;5;124m not in index[39m[38;5;124m"[39m)

[0;31mKeyError[0m: "['Risk_factor_all-rf_2018'] not in index"

